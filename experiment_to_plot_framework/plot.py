"""Provide generic plotting functionality"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_plot.ipynb.

# %% auto 0
__all__ = ['default_kwargs', 'mpl_wrapper']

# %% ../nbs/00_plot.ipynb 4
from PIL import Image
import io
import matplotlib.pyplot as plt

default_kwargs = {"linewidth": 4}

def mpl_wrapper(
    plot_list: list[tuple[list, dict]], # a two-element tuple containing (args, kwargs) to pass to matplotlib's `plot` function.
    xlabel: str=None, # X axis label
    ylabel: str=None # Y axis label
) -> Image.Image:
    """
    Matplotlib wrapper function. Provides a default plot style given data to plot.
    Returns a PIL image containing the plot.
    """
    buf = io.BytesIO() # for saving the image

    # plot the traces
    fig, ax = plt.subplots(figsize=(5, 5))
    for trace_specs in plot_list:
        args, kwargs = trace_specs
        kwargs = default_kwargs | kwargs
        plt.plot(*args, **kwargs)

    # axis labels
    if xlabel: plt.xlabel(xlabel, fontsize=20)
    if ylabel: plt.ylabel(ylabel, fontsize=20)

    # tick labels
    plt.xticks(fontsize=14)
    plt.yticks(fontsize=14)
    
    plt.legend(loc="center left", bbox_to_anchor=(1, 0.5), fontsize=14)

    # save the image
    fig.savefig(buf, format="png", bbox_inches="tight")
    buf.seek(0) # rewind buffer's file pointer to the beginning.

    plt.close()
    return Image.open(buf)
